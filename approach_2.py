# -*- coding: utf-8 -*-
"""Approach_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12HdfLKyXObtEIJuwATx3lU58Jj2d7S_b

## Initializing and Reading CSV

Defined a read() function and initialized all the essential lists for the Knapsack Problem
"""

import numpy
import gc

gc.collect() 
txid=[]                       #empty list created             
fees = []                                              
weights = []
final =[]

def read():
    with open("mempool.csv", "r") as f:                             # read the mempool.csv
        for line in f.readlines()[1:]:                              # reading line by line of the csv
            tx_id, fe, wgt, parents = line.strip().split(",")       # splitting and storing it in different corresponding variables
            fe, wgt = int(fe), int(wgt)                             # typcast
            txid.append(tx_id)                                      # appending it to the list
            fees.append(fe)
            weights.append(wgt)

"""## Knapsack Problem ALGO

Accounting the maximum no. of weights that we can take to maximize the miner's maximum value. The lower right of the n*W matrix gets the maximum value that we have printed with the variable name 'res.'
"""

def knapSack(W, wt, val, n):
    K = [[0 for w in range(W + 1)]     #2D matrix of size [n][W]
            for x in range(n + 1)] 
             
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif wt[i - 1] <= w:
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w])
            else:
                K[i][w] = K[i - 1][w]
 
    
    res = K[n][W]                      
    print("maximum fee "+str(res))                         #max value 
     
    w = W
    for i in range(n, 0, -1):          #traversing the 2D matrix from the back(reverse order)
        if res <= 0:
            break
        # either the result comes from the
        # top (K[i-1][w]) or from (val[i-1]
        # + K[i-1] [w-wt[i-1]]) as in Knapsack
        # table. If it comes from the latter
        # one/ it means the item is included.
        if res == K[i - 1][w]:           
            continue
        else:
                                        
            #print(wt[i - 1])
            final.append(txid[i-1])     # appending the tx_id in the list named final
            res = res - val[i - 1]      
            w = w - wt[i - 1]           # Since this weight is included its value is deducted

"""## Main function
Unable to run the code for max_weight =4000000 (given in the question), I am getting a memory failed error. So performed the code for the smaller dataset. Printed the list final that we have appended, which stores the tx_id's considering maximum fee to the minor

"""

if __name__ == "__main__":
    read()                                  # Read the memory pool
    n= len(fees)                            #                            
    knapSack(40000, weights, fees, n)       # max_weight = 40000  , calling the above function
    for x in range(len(final)):             # printing the list using loop
        print (final[x])